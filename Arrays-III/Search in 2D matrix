class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int i = 0, j = n - 1;
        int row = -1;
        while(i <= j) {
            int mid = (i + j) / 2;
            if(matrix[mid][0] == target) return true;
            else if(matrix[mid][0] < target) {
                row = mid;
                i = mid + 1;
            } 
            else j = mid - 1;
        }
        i = 0; j = m - 1;
        if(row == -1) return false;
        while(i <= j) {
            int mid = (i + j) / 2;
            if(matrix[row][mid] == target) return true;
            else if(matrix[row][mid] < target) i = mid + 1;
            else j = mid - 1;
        }
        return false;
    }
}

///////////////////////////////////////////////////////////////

 public static boolean searchMatrix(ArrayList<ArrayList<Integer>> matrix, int target) {
        int n = matrix.size();
        int m = matrix.get(0).size();

        //apply binary search:
        int low = 0, high = n * m - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int row = mid / m, col = mid % m;
            if (matrix.get(row).get(col) == target) return true;
            else if (matrix.get(row).get(col) < target) low = mid + 1;
            else high = mid - 1;
        }
        return false;
    }
